<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Galaxy2416's blog]]></title>
  <subtitle><![CDATA[o(∩∩)o活在一次元～语不惊人死不休]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="galaxy2416.github.io/"/>
  <updated>2014-02-05T16:16:05.006Z</updated>
  <id>galaxy2416.github.io/</id>
  
  <author>
    <name><![CDATA[galaxy2416]]></name>
    <email><![CDATA[gin@mail.dlut.edu.cn]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[51之linux : (一) 在linux环境下搭建51开发环境]]></title>
    <link href="galaxy2416.github.io/2014/02/05/ubuntu-51-fir/"/>
    <id>galaxy2416.github.io/2014/02/05/ubuntu-51-fir/</id>
    <published>2014-02-05T13:56:31.000Z</published>
    <updated>2014-02-05T15:51:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-ubuntu-at89s52-s51-sdcc-usbasp-">此篇以Ubuntu下的AT89S52，S51+SDCC+USBASP的开发环境搭建来进行说明。</h3>
<p>系列说明：LINUX下程序开发具有一定的成熟性，但是对于跨平台的包括部分的MCU，FPGA还并未被广泛使用,本系列将针对51系列的MCU.跟大家分享下。</p>
<p>环境如下：</p>
<ul>
<li>OS系统 : ubuntu 12.04</li>
<li>编译器 : sdcc</li>
<li>烧录软件 : avrdude</li>
<li>烧录器件 : usbasp
<a id="more"></a>
开发板：</li>
</ul>
<p>开发板的确是有个小的，不过这意搭接了一个个人的小面包板版本。</p>
<p>如下图:<img src="/img/ubuntu-51-fir/hardware1.jpg" alt="HARDWARE">
最好弄运行的时候只需要电池1.2V*4，用了3个3.6V就可行（我的电池座忘带了，直接连起来）～建议最好有个USB接出来的5V电源或者自己有个变压器做的稳压电源，面包板上有一个电源小板子就是如此功能，不过这里没有使用。</p>
<p> <em>注:旁边的小板子是USBASP,也有供电功能～此处就放在那里做个合影</em>。</p>
<hr>
<p><code>软件准备工作:</code></p>
<p>软件安装，软件安装建议使用ubuntu的软件中心，比较方便。需要sdcc，avrdude即可了。文本编辑什么都行。也可以集成在codeblocks和eclipse里面，ubuntu下有个51MCU的IDE，可以下来用‘mcu8051ide’。</p>
<p>对于命令行可以如下安装。对于一些附带库和文档自行选择即可～</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">sudo</span> apt-get install avrdude
<span class="built_in">sudo</span> apt-get install sdcc
</pre></td></tr></table></figure>

<p>&#39;测试开始&#39;
开始之前需要先写一个main.c的程序</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="preprocessor">#include &lt;8052.h&gt;</span>
<span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> size_t;
 
<span class="preprocessor">#define LED P0_0</span>
 
<span class="keyword">void</span> delay(size_t t)
{
        <span class="keyword">while</span>(t--);
}
 
<span class="keyword">void</span> main()
{
        <span class="keyword">while</span>(<span class="number">1</span>)
        {
                LED = <span class="number">0</span>;
                delay(<span class="number">20000</span>);
                LED = <span class="number">1</span>;
                delay(<span class="number">20000</span>);
        }
}
</pre></td></tr></table></figure>

<p>这是一个很简单让一个小灯blink的程序。</p>
<p><code>编译：</code></p>
<p>之后就要编译程序把程序变成单片机能使用的<em>.elf </em>.bin *.hex之类</p>
<p>这里使用的是SDCC默认编译出现的*.ihx (intel hex)</p>
<p>在当前目录下执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sdcc -mmcs51 main<span class="preprocessor">.c</span>
</pre></td></tr></table></figure>

<p><del>-mmcs51</del> <em>也可以-默认</em></p>
<p><code>配置avrdude:</code></p>
<p>使用avrdude烧写 </p>
<p>我们不能直接使用avrdude烧写，这是因为它默认只支持AVR芯片，但是通过一些配置，我们可以使用它来烧写。</p>
<p>对于8051芯片，有三种配置文件，分别适用于不同的型号。看看你要哪一种，然后复制到/etc/avrdude.conf并保存。</p>
<p><code>sudo gedit /etc/avrdude.conf</code></p>
<p><em>For AT89S51</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="comment">#------------------------------------------------------------</span>
<span class="comment"># AT89S51</span>
<span class="comment">#------------------------------------------------------------</span>
part
    <span class="property">id</span>               = <span class="string">"8052"</span>;
    desc             = <span class="string">"AT89S51"</span>;
    signature        = <span class="number">0x1E</span> <span class="number">0x51</span> <span class="number">0x06</span>;
    chip_erase_delay = <span class="number">500000</span>;
    pgm_enable       = <span class="string">"1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    chip_erase       = <span class="string">"1 0 1 0  1 1 0 0    1 0 0 x  x x x x"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    <span class="keyword">timeout</span>      = <span class="number">200</span>;
    stabdelay      = <span class="number">100</span>;
    cmdexedelay      = <span class="number">25</span>;
    synchloops      = <span class="number">32</span>;
    bytedelay      = <span class="number">0</span>;
    pollindex      = <span class="number">3</span>;
    pollvalue      = <span class="number">0x53</span>;
    predelay      = <span class="number">1</span>;
    postdelay      = <span class="number">1</span>;
    pollmethod      = <span class="number">0</span>; 

    memory <span class="string">"flash"</span>
        size            = <span class="number">4096</span>;
        paged           = no;
        min_write_delay = <span class="number">4000</span>;
        max_write_delay = <span class="number">9000</span>;
        readback_p1     = <span class="number">0xff</span>;
        readback_p2     = <span class="number">0xff</span>;
        <span class="command">read</span>            = <span class="string">"  0   0   1   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  o   o   o   o    o   o   o   o"</span>; 

        <span class="command">write</span>           = <span class="string">"  0   1   0   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  i   i   i   i    i   i   i   i"</span>;
   mode      = <span class="number">0x21</span>;
   <span class="command">delay</span>      = <span class="number">12</span>;
      ; 

    memory <span class="string">"signature"</span>
        size            = <span class="number">3</span>;
        <span class="command">read</span>            = <span class="string">"0  0  1  0   1  0  0  0   x  x  x  0   0  0 a1 a0"</span>,
                          <span class="string">"0  0  0  0   0  0  0  0   o  o  o  o   o  o  o  o"</span>;
      ;
  ;
</pre></td></tr></table></figure>

<p><em>For AT89S52</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="comment">#------------------------------------------------------------</span>
<span class="comment"># AT89S52</span>
<span class="comment">#------------------------------------------------------------</span>
part
    <span class="property">id</span>               = <span class="string">"8052"</span>;
    desc             = <span class="string">"AT89S52"</span>;
    signature        = <span class="number">0x1E</span> <span class="number">0x52</span> <span class="number">0x06</span>;
    chip_erase_delay = <span class="number">500000</span>;
    pgm_enable       = <span class="string">"1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    chip_erase       = <span class="string">"1 0 1 0  1 1 0 0    1 0 0 x  x x x x"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    <span class="keyword">timeout</span>      = <span class="number">200</span>;
    stabdelay      = <span class="number">100</span>;
    cmdexedelay      = <span class="number">25</span>;
    synchloops      = <span class="number">32</span>;
    bytedelay      = <span class="number">0</span>;
    pollindex      = <span class="number">3</span>;
    pollvalue      = <span class="number">0x53</span>;
    predelay      = <span class="number">1</span>;
    postdelay      = <span class="number">1</span>;
    pollmethod      = <span class="number">0</span>; 

    memory <span class="string">"flash"</span>
        size            = <span class="number">8192</span>;
        paged           = no;
        min_write_delay = <span class="number">4000</span>;
        max_write_delay = <span class="number">9000</span>;
        readback_p1     = <span class="number">0xff</span>;
        readback_p2     = <span class="number">0xff</span>;
        <span class="command">read</span>            = <span class="string">"  0   0   1   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  o   o   o   o    o   o   o   o"</span>;

        <span class="command">write</span>           = <span class="string">"  0   1   0   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  i   i   i   i    i   i   i   i"</span>;
   mode      = <span class="number">0x21</span>;
   <span class="command">delay</span>      = <span class="number">12</span>;
      ; 

    memory <span class="string">"signature"</span>
        size            = <span class="number">3</span>;
        <span class="command">read</span>            = <span class="string">"0  0  1  0   1  0  0  0   x  x  x  0   0  0 a1 a0"</span>,
                          <span class="string">"0  0  0  0   0  0  0  0   o  o  o  o   o  o  o  o"</span>;
      ;
  ;
</pre></td></tr></table></figure>

<p><em>For AT89S8253</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="comment">#------------------------------------------------------------</span>
<span class="comment"># AT89S8253</span>
<span class="comment">#------------------------------------------------------------</span>
part
    <span class="property">id</span>               = <span class="string">"8253"</span>;
    desc             = <span class="string">"AT89S8253"</span>;
    chip_erase_delay = <span class="number">20000</span>;
    pgm_enable       = <span class="string">"1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    chip_erase       = <span class="string">"1 0 1 0  1 1 0 0    1 0 0 x  x x x x"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    <span class="keyword">timeout</span>      = <span class="number">200</span>;
    stabdelay      = <span class="number">100</span>;
    cmdexedelay      = <span class="number">25</span>;
    synchloops      = <span class="number">32</span>;
    bytedelay      = <span class="number">0</span>;
    pollindex      = <span class="number">3</span>;
    pollvalue      = <span class="number">0x53</span>;
    predelay      = <span class="number">1</span>;
    postdelay      = <span class="number">1</span>;
    pollmethod      = <span class="number">0</span>; 

    memory <span class="string">"flash"</span>
        size            = <span class="number">12288</span>;
        paged           = no;
        min_write_delay = <span class="number">4000</span>;
        max_write_delay = <span class="number">9000</span>;
        readback_p1     = <span class="number">0xff</span>;
        readback_p2     = <span class="number">0xff</span>;
        <span class="command">read</span>            = <span class="string">"  0   0   1   0    0   0   0   0"</span>,
                          <span class="string">"  x   x a13 a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  o   o   o   o    o   o   o   o"</span>;

        <span class="command">write</span>           = <span class="string">"  0   1   0   0    0   0   0   0"</span>,
                          <span class="string">"  x   x a13 a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  i   i   i   i    i   i   i   i"</span>;
   mode      = <span class="number">0x21</span>;
   <span class="command">delay</span>      = <span class="number">12</span>;
      ; 

    memory <span class="string">"signature"</span>
        size            = <span class="number">2</span>;
        readback_p1     = <span class="number">0x1E</span>;
        readback_p2     = <span class="number">0x73</span>;
        <span class="command">read</span>            = <span class="string">"0  0  1  0   1  0  0  0   x  x  x  x   x  x  x  x"</span>,
                          <span class="string">"x  x  1  1   0  0  0 a0   o  o  o  o   o  o  o  o"</span>;
      ;
  ;
</pre></td></tr></table></figure>

<p><strong>特意要说明一下的是，网上有些配置在S51和S52的delay的参数上给的20000，这个delay太短了，在验证代码的时候会出错。因此还是建议用如上的配置。</strong></p>
<p><code>使用avrdude烧写:</code></p>
<p>配置完成后要用main.ihx进行烧写,在终端执行 
<code>make program</code>
(makefile见后文)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre>monkey<span class="property">@monkey</span>-ThinkPad-<span class="attribute">E425</span>:~/McuWork/<span class="number">51</span>_SDCC/workpace/Blink$ make program 
sudo avrdude -p <span class="number">8052</span> -c usbasp -e -U <span class="attribute">flash</span>:<span class="attribute">w</span>:<span class="string">'./main.ihx'</span>

<span class="attribute">avrdude</span>: <span class="attribute">warning</span>: cannot set sck period. please check <span class="keyword">for</span> usbasp firmware update.
<span class="attribute">avrdude</span>: AVR device initialized <span class="keyword">and</span> ready to accept instructions

Reading | <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">## | 100% 0.01s</span>

<span class="attribute">avrdude</span>: Device signature = <span class="number">0x1e5206</span>
<span class="attribute">avrdude</span>: erasing chip
<span class="attribute">avrdude</span>: <span class="attribute">warning</span>: cannot set sck period. please check <span class="keyword">for</span> usbasp firmware update.
<span class="attribute">avrdude</span>: reading input file <span class="string">"./main.ihx"</span>
<span class="attribute">avrdude</span>: input file ./main.ihx auto detected as Intel Hex
<span class="attribute">avrdude</span>: writing flash (<span class="number">140</span> bytes):

Writing | <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">## | 100% 1.69s</span>

<span class="attribute">avrdude</span>: <span class="number">140</span> bytes <span class="keyword">of</span> flash written
<span class="attribute">avrdude</span>: verifying flash memory against ./main.<span class="attribute">ihx</span>:
<span class="attribute">avrdude</span>: load data flash data from input file ./main.<span class="attribute">ihx</span>:
<span class="attribute">avrdude</span>: input file ./main.ihx auto detected as Intel Hex
<span class="attribute">avrdude</span>: input file ./main.ihx contains <span class="number">140</span> bytes
<span class="attribute">avrdude</span>: reading <span class="literal">on</span>-chip flash <span class="attribute">data</span>:

Reading | <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">## | 100% 0.57s</span>

<span class="attribute">avrdude</span>: verifying ...
<span class="attribute">avrdude</span>: <span class="number">140</span> bytes <span class="keyword">of</span> flash verified

<span class="attribute">avrdude</span>: <span class="attribute">safemode</span>: Fuses OK

avrdude done.  Thank you.

monkey<span class="property">@monkey</span>-ThinkPad-<span class="attribute">E425</span>:~/McuWork/<span class="number">51</span>_SDCC/workpace/Blink$
</pre></td></tr></table></figure>

<p><code>选项说明(Options)：</code></p>
<p><a href="/attachment/avrdude.pdf">avrdude文档</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>-p specifies <span class="operator">the</span> type <span class="operator">of</span> <span class="operator">the</span> MCU connected <span class="built_in">to</span> <span class="operator">the</span> programmer.  
-c specifies <span class="operator">the</span> default programmer  
-e causes <span class="operator">a</span> chip erase <span class="built_in">to</span> be executed.  
-U memtype:op:filename  
The op field specifies what operation <span class="built_in">to</span> perform:  
 r <span class="built_in">read</span> device memory <span class="operator">and</span> <span class="built_in">write</span> <span class="built_in">to</span> <span class="operator">the</span> specified <span class="built_in">file</span>  
 w <span class="built_in">read</span> data <span class="built_in">from</span> <span class="operator">the</span> specified <span class="built_in">file</span> <span class="operator">and</span> <span class="built_in">write</span> <span class="built_in">to</span> <span class="operator">the</span> device memory  
 v <span class="built_in">read</span> data <span class="built_in">from</span> both <span class="operator">the</span> device <span class="operator">and</span> <span class="operator">the</span> specified <span class="built_in">file</span> <span class="operator">and</span> perform <span class="operator">a</span> verify
</pre></td></tr></table></figure>

<p>总图:<img src="/img/ubuntu-51-fir/hardware2.jpg" alt="WHOLE"></p>
<p>使用USBASP前请用<code>lsusb</code>查看一下是否能检测到。并且注意STC的串口软件没有在linux下版本，USBASP使用的是ISP接口，对于AT89C51,AT89C52是无法使用的切记。</p>
<p>USBASP是开源的一款硬件,
<a href="http://www.fischl.de/usbasp/" target="_blank">USBASP制作</a></p>
<p><a href="/attachment/usb51.zip">USBASP固件</a> (以防有的固件比较老不支持)</p>
<hr>
<p><strong>附录：</strong></p>
<p>单源文件简易Makefile</p>
<p>make : 编译</p>
<p>make hex : 生成*.hex</p>
<p>make program : 烧录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="comment">#=============================================================================</span>
<span class="comment">#     FileName: Makefile</span>
<span class="comment">#         Desc: sdcc signal file</span>
<span class="comment">#       Author: Galaxy2416(Gin)</span>
<span class="comment">#        Email: sunxiao.gin@gmail.com</span>
<span class="comment">#     Compiler: sdcc</span>
<span class="comment">#      Version: 0.0.1</span>
<span class="comment">#   LastChange: 2012-05-19 16:30:35</span>
<span class="comment">#      History:</span>
<span class="comment">#=============================================================================</span>


<span class="constant">CC</span>=sdcc

<span class="constant">SOURCE</span> = <span class="variable">$(wildcard *.c)</span>


all :
	<span class="variable">$(CC)</span> -mmcs51 <span class="variable">$(SOURCE)</span> 
<span class="title">hex:</span>
	packihx '<span class="variable">$(wildcard *.ihx)</span>' &gt; '<span class="variable">$(patsubst %.ihx,%.hex,$(wildcard *.ihx)</span>)'

program : 
	sudo avrdude -p 8052 -c usbasp -e -U flash:w:'./<span class="variable">$(wildcard *.ihx)</span>'

<span class="phony"><span class="keyword">.PHONY</span>:	clean</span>
<span class="title">clean:</span>
	rm -f *.bak
	rm -f *.rel
	rm -f *.asm
	rm -f *.lst
	rm -f *.sym
	rm -f *.map
	rm -f *.lnk
	rm -f *.mem
	rm -f *.i
	rm -f *.d
	rm -f *.rst
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h3 id="-ubuntu-at89s52-s51-sdcc-usbasp-">此篇以Ubuntu下的AT89S52，S51+SDCC+USBASP的开发环境搭建来进行说明。</h3>
<p>系列说明：LINUX下程序开发具有一定的成熟性，但是对于跨平台的包括部分的MCU，FPGA还并未被广泛使用,本系列将针对51系列的MCU.跟大家分享下。</p>
<p>环境如下：</p>
<ul>
<li>OS系统 : ubuntu 12.04</li>
<li>编译器 : sdcc</li>
<li>烧录软件 : avrdude</li>
<li>烧录器件 : usbasp
]]></summary>
    
      <category term="51单片机" scheme="galaxy2416.github.io/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Say Hi]]></title>
    <link href="galaxy2416.github.io/2014/01/30/say-hi/"/>
    <id>galaxy2416.github.io/2014/01/30/say-hi/</id>
    <published>2014-01-29T16:56:34.000Z</published>
    <updated>2014-01-29T18:30:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="maxwell-s-equations-in-differential-form">Maxwell&#39;s Equations in differential form</h2>
<p> <a id="more"></a>
$$ \nabla\cdot{\bf D} = \rho $$
$$ \nabla\cdot{\bf B} = 0 $$
$$ \nabla\times{\bf E} = -\frac{\partial{\bf B}}{\partial{\bf t}}$$
$$ \nabla\times{\bf H} = {\bf J} + \frac{\partial{\bf D}}{\partial{\bf t}} $$
<code>code:-&gt;</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>$$ \nabla\cdot{\bf D} = \rho $$
$$ \nabla\cdot{\bf B} = <span class="number">0</span> $$
$$ \nabla\times{\bf E} = -\frac{\partial{\bf B}}{\partial{\bf t}}$$
$$ \nabla\times{\bf H} = {\bf J} + \frac{\partial{\bf D}}{\partial{\bf t}} $$
</pre></td></tr></table></figure>

<p><img src="/img/pikadrink.jpg" alt="pika~"></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="maxwell-s-equations-in-differential-form">Maxwell&#39;s Equations in differential form</h2>
<p> ]]></summary>
    
      <category term="第一篇文章" scheme="galaxy2416.github.io/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    
      <category term="生活" scheme="galaxy2416.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
